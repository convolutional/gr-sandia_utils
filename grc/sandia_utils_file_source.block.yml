# auto-generated by grc.converter

id: sandia_utils_file_source
label: File Source
category: '[Sandia]/Sandia Utilities/File Operators'

parameters:
-   id: file
    label: File
    dtype: file_open
-   id: file_type
    label: File Type
    dtype: string
    default: raw
    options: [raw, raw_header]
    option_labels: [Raw IQ, Raw IQ + Header]
-   id: rate
    label: Sampling Rate
    dtype: int
    default: int(samp_rate)
    hide: part
-   id: type
    label: Output Type
    dtype: enum
    options: [complex, sc16, float, int, short, byte]
    option_labels: [Complex Float, Complex Short Int, Float, Int, Short, Byte]
    option_attributes:
        size: [gr.sizeof_gr_complex, 2*gr.sizeof_short, gr.sizeof_float, gr.sizeof_int,
            gr.sizeof_short, gr.sizeof_char]
    hide: part
-   id: force_new
    label: Force New File?
    dtype: enum
    default: 'False'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: repeat
    label: Repeat
    dtype: enum
    default: 'False'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: vlen
    label: Vec Length
    dtype: int
    default: '1'
    hide: ${ ('part' if int(vlen) == 1 else 'none') }
-   id: begin_tag
    label: Add begin tag
    dtype: raw
    default: pmt.PMT_NIL
-   id: file_tags
    label: Add file tags
    dtype: enum
    default: 'False'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']

inputs:
-   domain: message
    id: pdu
    optional: true

outputs:
-   domain: stream
    dtype: ${ type.t }
    vlen: ${ vlen }
asserts:
- ${ vlen > 0 }

templates:
    imports: import sandia_utils
    make: |-
        sandia_utils.file_source(${type.size}*${vlen}, ${file}, ${file_type}, ${repeat}, ${force_new})
        self.${id}.set_begin_tag(${begin_tag})
        self.${id}.add_file_tags(${file_tags})
    callbacks:
    - open(${file}, ${repeat})
    - self.${id}.set_begin_tag(${begin_tag})
    - self.${id}.add_file_tags(${file_tags})

documentation: |-
    Generate data from an input file.

    This block is functionally equivalent to the in-tree file source block with a
    message port extension to specify a new input file.  If the 'Force New File'
    option is chosen, the current file being processed will be closed and the new
    file opened when commanded.

    Adding file tags will cause the stream tags available based on the file type
    to be added to the output stream at the first sample of the file.  Similarly, if
    the beginning tags are populated, the first sample of every file will contain
    that tag.

file_format: 1
