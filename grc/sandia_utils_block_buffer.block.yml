# auto-generated by grc.converter

id: sandia_utils_block_buffer
label: Block Buffer
category: '[Sandia]/Sandia Utilities'

parameters:
-   id: type
    label: Type
    dtype: enum
    options: [complex, float, int, short, byte]
    option_attributes:
        size: [gr.sizeof_gr_complex, gr.sizeof_float, gr.sizeof_int, gr.sizeof_short,
            gr.sizeof_char]
    hide: part
-   id: nsamples
    label: Number of Samples
    dtype: int
    default: '10000'
-   id: samp_rate
    label: Sample Rate
    dtype: real
    default: samp_rate
-   id: pass_data
    label: Pass Data?
    dtype: bool
    default: 'True'
    options: ['True', 'False']
    hide: part

inputs:
-   domain: stream
    dtype: ${ type.t }

outputs:
-   domain: stream
    dtype: ${ type.t }

templates:
    imports: import sandia_utils
    make: sandia_utils.block_buffer(${type.size}, ${nsamples}, ${samp_rate}, ${pass_data})
    callbacks:
    - set_nsamples(${nsamples})
    - set_pass_data(${pass_data})

documentation: |-
    Guarantee blocks of continuous samples.

    This block internally buffers the specified number of samples. It watches for rx_time tags, which indicate overflow, sample rate change, or frequency changes from the source.
    The output is guaranteed to be free from such discontinuities.

    A BLOCK tag is output with the first sample of each block. The value of the tag is the number of samples which have been skipped since the last block (not counting any skips from source overflows).

    An example use case would be to place this block immediately after a source, proceeded by a throttle. Then, the source can be set to a high sample rate, while the processing is done at a lower, configurable rate.

file_format: 1
