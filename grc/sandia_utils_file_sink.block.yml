# auto-generated by grc.converter

id: sandia_utils_file_sink
label: File Sink
category: '[Sandia]/Sandia Utilities/File Operators'

parameters:
-   id: type
    label: Input Type
    dtype: enum
    options: [complex, sc16, float, int, short, byte]
    option_labels: [Complex Float, Complex Short Int, Float, Int, Short, Byte]
    option_attributes:
        size: [gr.sizeof_gr_complex, 2*gr.sizeof_short, gr.sizeof_float, gr.sizeof_int, gr.sizeof_short, gr.sizeof_char]
        str: ["'complex'", "'complex_int'", "'float'", "'int'", "'short'", "'byte'"]
    hide: part
-   id: vlen
    label: Vec Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: mode
    label: Mode
    dtype: int
    default: sandia_utils.MANUAL
    options: [sandia_utils.MANUAL, sandia_utils.TRIGGERED]
    option_labels: [Manual, Triggered]
-   id: record
    label: Record?
    dtype: bool
    default: 'False'
    options: ['True', 'False']
    hide: part
-   id: file_type
    label: File Type
    dtype: string
    default: raw
    options: [raw, raw_header]
    option_labels: [Raw IQ, Raw IQ + Header]
-   id: rate
    label: Sampling Rate
    dtype: int
    default: int(samp_rate)
    hide: part
-   id: directory
    label: Directory
    category: File Options
    dtype: string
    default: '""'
-   id: create_new_dir
    label: Create New Directory?
    category: File Options
    dtype: bool
    default: 'True'
    options: ['True', 'False']
    hide: partial
-   id: name_spec
    label: File Name Specifier
    category: File Options
    dtype: string
    default: '"%Y%m%d_%H_%M_%S_fc=%fcMHz_fs=%fskHz.dat"'
    hide: part
-   id: nsamples
    label: File Length (Samples)
    category: File Options
    dtype: int
    default: '0'
-   id: align
    label: Align to Second Boundary?
    category: File Options
    dtype: bool
    default: 'True'
    options: ['True', 'False']
    hide: partial

inputs:
-   domain: stream
    dtype: ${ type.t }
    vlen: ${ vlen }

outputs:
-   domain: message
    id: msg
    optional: true
asserts:
- ${ vlen > 0 }
- ${ int(nsamples) > -1 }

templates:
    imports: import sandia_utils
    make: |-
        sandia_utils.file_sink(${type.str}, ${type.size}*${vlen}, ${file_type}, ${mode}, ${nsamples}, ${rate}, ${directory}, ${name_spec})
        self.${id}.set_recording(${record})
        self.${id}.set_gen_new_folder(${create_new_dir})
        self.${id}.set_second_align(${align})
    callbacks:
    - set_mode(${mode})
    - set_recording(${record})
    - set_nsamples(${nsamples})
    - set_second_align(${align})

documentation: |-
    This block will save data to files.  File length specified in number
    of samples, where 0 will result in a single file being generated.  Successive
    files increment time and file number accordingly.

    A new folder can be generated at the start of a new collect.  
    The folder name will have the format:
        
      YYYYMMDD/HH_MM_SS

    where Y = year, M = month(00-12), D = day (00-31), HH = hour (00-23),
    MM = minute (00-59), and SS = second (00-60)

    File names can be specified using all conversion specifications supported by strftime.  
    Additional the following converation specifications can be used:

      %fcM      Collection center frequency in MHz
      %fck      Collection center frequency in kHz
      %fcc      Collection center frequency in Hz
      %fsM      Collection sample rate in MHz
      %fsk      Collection sample rate in kHz
      %fsc      Collection sample rate in Hz
      %fd       Generated file number.  Modifiers in the standard form (0,N) can
                be specified to determine the number of files generated.  For
                example, %03fd will wrap after 1000 files, prepending zeros to ensure
                3 characters per file number.

file_format: 1
